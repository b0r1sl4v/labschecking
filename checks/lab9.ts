import {
  getFileContent,
  sendError,
  sendSuccess,
  sendWarning,
} from './helpers/common';
import {
  getSelectorStyles,
  getCommonStyles,
  SelectorStyleProps,
  CommonStyleProps,
} from './helpers/styles';

const cssContent = getFileContent('css/style.css');

console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è:');
const selectionRules: SelectorStyleProps = {
  '::selection': [
    {
      rule: /background/,
    },
    {
      rule: /color/,
    },
  ],
};

const selectionFound = getSelectorStyles(selectionRules, cssContent);
if (selectionFound) {
  sendSuccess('–°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
} else {
  sendWarning(
    '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä',
  );
}

console.log(
  '\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–æ–≤ hover, active, focus:',
);
const pseudoclassRules: SelectorStyleProps = {
  ':hover': [
    {
      rule: /color/,
    },
    {
      rule: /background/,
    },
    {
      rule: /padding/,
    },
    {
      rule: /border/,
    },
  ],
  ':active': [
    {
      rule: /color/,
    },
    {
      rule: /background/,
    },
    {
      rule: /padding/,
    },
    {
      rule: /border/,
    },
  ],
  ':focus': [
    {
      rule: /color/,
    },
    {
      rule: /background/,
    },
    {
      rule: /padding/,
    },
    {
      rule: /border/,
    },
  ],
};

const pseudoclassesRulesFound = getSelectorStyles(pseudoclassRules, cssContent);
if (pseudoclassesRulesFound) {
  sendSuccess('–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
} else {
  sendWarning('–ù–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–æ–≤');
}

console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ transition');
const transitionStyles: CommonStyleProps = [
  {
    rule: /transition/,
  },
];
const { allFound: hasTransitionRules } = getCommonStyles(
  transitionStyles,
  cssContent,
);
if (hasTransitionRules) {
  sendSuccess('–ï—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ transition');
} else {
  sendError('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ transition');
}

const placeholderRules: SelectorStyleProps = {
  '::placeholder': [
    {
      rule: /color/,
    },
    {
      rule: /background-color/,
    },
  ],
};

const hasPlaceholderRules = getSelectorStyles(placeholderRules, cssContent);

if (hasPlaceholderRules) {
  sendSuccess('–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
} else {
  sendWarning('–ù–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤');
}

console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è —è—Ä–ª—ã–∫–æ–≤ –ø–æ–ª–µ–π –≤ —Ñ–æ–∫—É—Å–µ');
const labelRules: SelectorStyleProps = {
  ':focus + label': [
    {
      rule: /.+/,
    },
  ],
};
const hasLabelRules = getSelectorStyles(labelRules, cssContent);
if (hasLabelRules) {
  sendSuccess('–ï—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è —è—Ä–ª—ã–∫–æ–≤ –ø–æ–ª–µ–π');
} else {
  sendWarning('–°—Ç–∏–ª–µ–π –¥–ª—è —è—Ä–ª—ã–∫–æ–≤ –ø–æ–ª–µ–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å');
}

console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å–æ–≤');
const checkedRules: SelectorStyleProps = {
  ':checked': [
    {
      rule: /.+/,
    },
  ],
};
const hasCheckedRules = getSelectorStyles(checkedRules, cssContent);
if (hasCheckedRules) {
  sendSuccess('–ï—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å–æ–≤');
} else {
  sendWarning('–°—Ç–∏–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å');
}

console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π');
const DictRules: SelectorStyleProps = {
  '::first-letter': [
    {
      rule: /font-size|font-weight/,
    },
  ],
  '::before': [
    {
      rule: /content/,
      definition: /üõà/,
    },
  ],
};
const hasDictRules = getSelectorStyles(DictRules, cssContent);
if (hasDictRules) {
  sendSuccess('–ï—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –±—É–∫–≤–∏—Ü—ã, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç "üõà"');
} else {
  sendWarning('–°—Ç–∏–ª–µ–π –¥–ª—è dl+dt –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å');
}
